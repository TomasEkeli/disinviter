@page "/invites"
@using Microsoft.AspNetCore.SignalR.Client;
@using disinviter.Commands
@using disinviter.Projections;
@inject IConfiguration Configuration;
@implements IAsyncDisposable;


<PageTitle>Invites</PageTitle>

<h1>Invitations</h1>

<div>State: @_connection?.State</div>

<div class="form-group">
    <label>Invite:
        <input placeholder="name" @bind="_newPersonName" />
    </label>
    <button @onclick="InviteNew">Invite</button>
</div>

<div class="card-column">
    <h2>Invited</h2>
    @foreach (var name in _invited)
    {
        <div class="card-container">
            <div class="card-header">
                @name

            </div>
            <div class="card-body">
                <button class="btn btn-danger btn-lg" @onclick="() => Snub(name)">
                    <span class="oi oi-thumb-down" aria-hidden="true"></span>
                    Snub
                </button>
            </div>
        </div>

    }
</div>

<div class="card-column">
    <h2>Snubbed</h2>
    @foreach (var name in _snubbed)
    {
        <div class="card-container">
            <div class="card-header">
                @name
            </div>
            <div class="card-body">
                <button class="btn btn-primary invite btn-lg" @onclick="() => Invite(name)">
                    <span class="oi oi-thumb-up" aria-hidden="true"></span>
                    Invite
                </button>
            </div>
        </div>
    }
</div>

@code {
    HubConnection? _connection;
    List<string> _invited = new List<string>();
    List<string> _snubbed = new List<string>();
    string? _newPersonName;
    public bool IsConnected => _connection?.State == HubConnectionState.Connected;

    public async Task InviteNew()
    {
        if (!IsConnected || string.IsNullOrWhiteSpace(_newPersonName))
        {
            return;
        }
        await _connection
            ?.SendAsync(
                nameof(PersonCommands.Invite),
                _newPersonName
            );
    }

    public async Task Invite(string personName)
    {
        if (!IsConnected || string.IsNullOrWhiteSpace(personName))
        {
            return;
        }
        await _connection
            ?.SendAsync(
                nameof(PersonCommands.Invite),
                personName
            );
    }

    public async Task Snub(string personName)
    {
        if (!IsConnected || string.IsNullOrWhiteSpace(personName))
        {
            return;
        }
        await _connection
            ?.SendAsync(
                nameof(PersonCommands.Snub),
                personName
            );
    }

    public async ValueTask DisposeAsync()
    {
        if (_connection != null)
        {
            Console.WriteLine($"{_connection.ConnectionId} disposing connection");
            await _connection.DisposeAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri($"{Configuration["SIGNALR_HOST"]}/person");

        _connection = new HubConnectionBuilder()
            .WithUrl(uri.AbsoluteUri)
            .WithAutomaticReconnect()
            .Build();

        _connection.On<string>(
            nameof(IInvitationMessages.Invited),
            personName =>
            {
                _invited.Add(personName);
                _snubbed.Remove(personName);

                InvokeAsync(StateHasChanged);
            }
        );

        _connection.On<string>(
            nameof(IInvitationMessages.Snubbed),
            personName =>
            {
                _snubbed.Add(personName);
                _invited.Remove(personName);

                InvokeAsync(StateHasChanged);
            }
        );

        _connection.On<PartyInvitations>(
            nameof(IInvitationMessages.PartyInvitations),
            m =>
            {
                _invited = m.Invited;
                _snubbed = m.Snubbed;

                InvokeAsync(StateHasChanged);
            }
        );

        Console.WriteLine($"Connecting to {uri}");
        await _connection.StartAsync();
    }
}