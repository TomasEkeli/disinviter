@page "/"
@using Microsoft.AspNetCore.SignalR.Client;
@using disinviter.Projections;
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@implements IAsyncDisposable;

<PageTitle>Index</PageTitle>

<h1>You might be invited to Tore's birthday</h1>

<div class="card-container">

    <div class="card-header">State: @_connection?.State</div>
    <div class="card-body">
        <div class="form-group">
            @if(_user is null)
            {
                <label>User: <input @bind="_user" /></label>
            }
            else
            {
                <label>User: @_user</label>
            }
            <div class="form-group">
                <label>Message: <input @bind="_message" @onkeyup="SubmitMessage" size="50"  /> </label>
                <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
            </div>
        </div>
    </div>
</div>

<ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

<div class="card-container">
    <div class="card-header">
        <h3>Sounds!</h3>
    </div>
    <div class="card-body">
        <button @onclick=@(()=>Play("drikkevise"))>Drikkevise</button>
        <button @onclick=@(()=>Toast())>Skål</button>
        @if (_play is not null)
        {
            <button @onclick=@(()=>Stop())>Stop</button>
        }
        @if (_play == "drikkevise")
        {
            <audio autoplay><source src="/sounds/drikkevise.mp3" /></audio>
        }
        @if (_play == "tore")
        {
            <audio autoplay><source src="/sounds/tore.mp3" /></audio>
        }
        @if (_play == "mike")
        {
            <audio autoplay><source src="/sounds/mike.mp3" /></audio>
        }
    </div>
</div>



@code {
    string? _playedBy = null;
    string? _stoppedBy = null;
    string? _play = null;
    HubConnection? _connection;
    List<string> _messages = new List<string>();
    string? _user;
    string? _message;

    public bool IsConnected => _connection?.State == HubConnectionState.Connected;

    async Task Play(string soundName)
    {
        if (IsConnected)
        {
            await _connection!.SendAsync("Play", _user, soundName);
        }
    }

    async Task Toast()
    {
        if (IsConnected)
        {
            await _connection!.SendAsync("Toast", _user);
        }
    }

    async Task Stop()
    {
        if (IsConnected)
        {
            await _connection!.SendAsync("Stop", _user);
        }
    }

    async Task SubmitMessage(KeyboardEventArgs args)
    {
        if (IsConnected
            && (args.Code == "Enter" || args.Code == "NumpadEnter")
        )
        {
            await Send();
            _message = null;
        }
    }

    async Task Send()
    {
        if (IsConnected
            && !string.IsNullOrWhiteSpace(_user)
            && !string.IsNullOrWhiteSpace(_message))
        {
            await _connection!.SendAsync("SendMessage", _user, _message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri($"{Configuration["SIGNALR_HOST"]}/chatHub");
        _connection = new HubConnectionBuilder()
            // todo: use the correct host when deployed (env variable?)
            .WithUrl(uri.AbsoluteUri)
            .Build();

        _connection.On<DateTimeOffset, string, string>(
            "ReceiveMessage",
            (time, user, message) =>
            {
                _messages.Insert(0, $"{time:HH:mm:ss} - {user}: {message}");
                _messages = _messages.Take(10).ToList();
                InvokeAsync(StateHasChanged);
            }
        );

        _connection.On<List<ChatMessage>>(
            "ReceiveMessages",
            (messages) =>
            {
                _messages.Clear();
                _messages.AddRange(
                    messages
                        .OrderByDescending(m => m.Time)
                        .Take(10)
                        .Select(m => $"{m.Time:HH:mm:ss} - {m.User}: {m.Message}")
                );
                InvokeAsync(StateHasChanged);
            }
        );

        _connection.On<string, string>(
            "SoundPlayed",
            (user, soundName) =>
            {
                _playedBy = user;
                _play = soundName;
                InvokeAsync(StateHasChanged);
            }
        );

        _connection.On<string>(
            "SoundStopped",
            (user) =>
            {
                _stoppedBy = user;
                _play = null;
                InvokeAsync(StateHasChanged);
            }
        );

        await _connection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_connection is not null)
        {
            await _connection.DisposeAsync();
        }
    }
}
